*Menggunakan Data base
    
Dalam pelajaran ini, kita akan menggunakan database untuk menambahkan
fitur berikut ke aplikasi.

*Menyiapkan database
    -MYSQL
        Ada bermacam-macam alat-alat pengelola database. Disini, kita akan
        menggunakan yang bernama MySQL. Normalnya, Anda memasang MySQL-nya
        secara terpisah, tetapi hal itu sudah dipersiapkan khusus untuk Anda
        dalam environment (lingkungan) Progate.

    -Menggunakan MySQL
        Untuk menggunakan MySQL dengan Node.js, Anda harus menyambungkan mereka. 
        Pada slide berikutnya, kita akan pelajari cara melakukannya.

    -Memasang paket mysql pada npm/express
        Untuk menghubungkan MySQL ke Node.js, Anda perlu menggunakan paket bernama mysql. 
        Ini sama dengan ketika kita memasang sebuah paket saat pengaturan express pada Study I.
        syntax:
        pada terminal:
        $npm install mysql
    
    -menghubungkan ke mysql 
        Kita lakukan import paket mysql-nya, barulah kemudian menggunakan method createConnection.
        Kita akan menyimpan informasi yang diperlukan dalam sebuah constant bernama connection.
        Dengan ini, selesailah proses menghubungkan MySQL. Syntax yang ini bukan hal penting 
        untuk diingat.

*Menggunakan database
    - algoritma 
        localhost:3000/index => nodejs/server => menjalankan query ke database => database mengirim ke server 
        => server mengirim dan menampilkan pada client

    -  Cara Menjalankan query
        Untuk menjalankan query ke database dari Node.js, Anda dapat menulis connection.query(A, B),
        dimana A adalah query-nya dan B adalah sebuah function yang berjalan setelah query tersebut diselesaikan
        (disebut juga callback).
        contoh:
        syntax:
            const connection = mysql.createConnection(......);

            connection.query(
                'SELECT*FROM items',
                ()=>{
                    //tampilkan halaman daftar belanjaan( ini dijalankan setelah querynya selesai)
                }
            );

    - callback query 
        Callback query dapat berisi dua rgument. yang pertama, eror berisikan
        informasi error ketika gagal query, lalu yang kedua, result 
        berisikan hasil query ( dalam hal ini, informasi item daftar belanjaan)
        
        syntax :
        connection.query(
            'SELECT*FROM items',
            (error,result)=>{
                console.log(result);
                res.render('index.ejs');
            }
        );

*Menampilkan Nilai yang Di pilih
    -Meneruskan Nilai ke ejs
        Dengan EJS, anda dapat mengakses nilai melalui method render. Dengan menulis
        {property: nilai} pada argumen ke -2 dari method render,Anda dapat
        meneruskan nilai ke sisi EJS, Di sni kita akan menggunakan nilai yang didapatkan dari database
        syntax menjadi:
        pada index.ejs hapus bagian 
                <% const items = [
            {id:1,name:'kentang'},
            {id:2,name:'wortel'},
            {id:3,name:'bawang'}
        ];%>

        lalu meneruskan niali ke ejs 
        syntax menjadi:
                connection.query(
            'SELECT*FROM items',
            (error,result)=>{
                console.log(result);
                res.render('index.ejs',{items :results});
            }
        );

*Fitur Penambah Item
    -Menampilkan Halaman penambah item
        Pertama,kita kaan menampilkan halaman penambahan item persis seperti
        yang sudah kita lakukan pada halaman top daftar belanjaan. kita membuat halaman ini agar di akses melalu //new
    -Tautan ke Halamn penambahan item
        Mari kita tambahkan tautan pada halaman daftar Belanjaan yang mengarah pada halaman penambahan item yang baru saja kita berikutnya
        syntax : index.ejs
                <a href="/new" class="......">+ Tambahkan </a>
                
                app.js
                app.get('/new',(req,res)=>{
                    res.render('new.ejs');
                });

*Memproses Fitur Penambahan Item
    - Menyiapkan Route untuk penambahan item
        Kita akan menambahkan route untuk penambahan item terbaru, hingga kini, kita
        menggunaakn app.get, namun kali ini kita akan gunakan app.post, method ini disebut GET dan post
        ,tergantung pada kenis request(permintaan). kita pelajari detailnya pada slide berikutnya.

        syntax:
        app.post('/create',(req,res)=>{
            connection.query(
                'INSERT INTO items (names) VALUES (?)',
                [req.body.itemName],(error,results)=>{
                    console.log(results);
                    res.redirect('index.ejs')
                }
            )
        })

    -Apa itu GET dan POST?
        Saat anda melakukan sebuah request ke server, terdapat aturan dalam merincikan jenis proses yang anda minta.
        sebagaimana ditampilkan di bwah ini, anda dapat melihat jenis proses apa yangdi
        di tentukan GET dan POST
        Gunakan GET untuk menampilkan halaman
        GET = Localhost:3000 -> Node.js -> Tampilkan daftar 
        Gunakan POST untuk memperbarui database
        POST = Tambahkan (buton) -> Node .js -> Perbarui database

    -Menyiapkan Formulir 
        Untuk pembuatan formulir, kita akan gunakan tag HTML <form>. Berdasarkan penetuan route
        ,kita akan atur attributr action menjadi berisi URL tujuan lalu attributr method berisi post atau get
        syntax:
        new.ejs
        <Form action="/create" method="post">
        <input type="text">
        <input type="submit" value="tambahkan">
        </form>

        app.js
        app.post('/create',(req, res)=>{
            .....
        })
    
    - MenampilkanDaftar Belanjaan 
        Mari kita tulis code untuk menampilkan daftar belanjaan.kita akan gunakan code yang sama
        seperti yang ada di /index untuk menampilkannya.

        syntax:
        app.js
        app.post('/create',(req, res)=>{
        connection.query(
            'SELECT*FROM items',(error, results)=>{
                res.render('index.ejs',{items: results});
            }
        );
        });
*Mendapatkan Nilai Input formulir
    - Mendapatkan Nilai input (1)
        Dengan mengatur atributr name dari elemnt input, Anda dapat mengirim informasi Formulir
        berbentuk object ke server. Llalu pada sisi server,Anda dapat mendapatkan nilai dari formulir
        menggunakan req.body.nilaiName.
        Localhost:3000/new.ejs input=tomat => mengirim ke node.js(server).

        Untuk mendapatkan nilai dari formulir, Anda harus menambahkan source code seperti contoh di bawha ini ke app.js
        syntax:
        //diperlukan konfigurasi unutk mengakses nilai nilai formulir
        app.user(express.urlencoded({extended:false}));

        //mendapatkan nilai-nilai formulir
        console.log(req.body.itemName);

*Menambahkan nilai input ke database
    -Menambahkan Data
        Kita bisa menggunakan method query seperti yang kita lakukan dengan SELECT untuk
        menjalankan INSERT id dari tabel items di atur menjadi AUTO INCREMENT,sehingga kita tidak
        harus khawatir dengan pengaturan id.
        syntax:
        app.js
        app.post('/create', (req,res)=>{     //element di arrat akan masuk ke ?
            connection.query(                     |
                'INSERT INTO items (name) VALUES (?)', //column id sudah di atur menjadid AUTO INCREMENT sehingga tidak perlu dirincikan
                (error, results)=>{
                                            //-> dijalankan setelah query selesai
                }
            )
        })


*maslaah saat ini adalah Setiap kali kita Reload halaman request(permintaan) sebelumnya akan dijalankan kembali dan item yang sama akan di tambahkan
    -Menggunakan Redirect(pengalihan)
     apa itu Redirect? 
     Server dapat menghasilkan respons yang berbunyi "berikutnya, buat permintaan ke URL ini."
     saat browser menerima pesan ini, browser akana secara otomatis membuat request ke URL yang
     ditentukan. proses membuat reques lain ke URL yang berbeda ini di sebut redirect.

     -Melakukan reload setelah Proses Redirect
        Dengan menggunakan redirect, kita daapt melakukan request pada /index setelah item di buat dan halaman daftar belanjaan tetampilkan. Dengan begitu
        ,Melakukan reload setelah pembuatan sebuah item belanjaan tidak akan mengulangi proses pembuatna item tersebut,
        sehingga item tidak terus menerus tertambahkan.

        localhost:3000/index (refresh) => node.js=>/create=>/index=>localhost:3000/index
    - Cara menggunakan Redirect 
        Setelah menambahkan item pada daftar belanjaan,mari redirect ke halaman daftar Belanjaan (/index).
        Untuk melakukan redirect,gunakan method res.redirect dan URL sebagai argumen.
        Sytax:
        app.js
        app.post('/create',(req,res)=>{
            connection.query(
                'INSERT INTO items(name) VALUES (?)',
                [req.body.itemName],
                (error,results)=>{
                    res.redirect('index');
                }
            );
        })

    -Menggunakan redirect 
        Ada sejumlah situasi dimana proses redirect akan berguna, khusunua seperti saat membuat request
         menggunakan method POST. Dalam kasus seperti ini, ketimbang menggunakan res.render,
         Kita mengguanakn redirect dan mengalihkan route get.
         Untuk POST gunakan redirect
         sytax menajdi:
            app.post('/create',(req,res)=>{
                connection.query(
                'INSERT INTO items (name) VALUES (?)',
                [req.body.itemName],
                (error,results)=>{
                res.redirect(/index);
                    );
                    }
                );
             });